pipeline {
  agent {
    node {
      label 'docker-daemon'
    }
  }

  tools { nodejs "v9.9.0" }
  environment {
    imageName = "tracking-opt-in-demo"
    currentCommit = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
    dockerRepoUrl = "${env.DOCKER_REPO_URL}"
    serviceName = "${imageName}-${currentCommit}"
    appHost = "${env.APP_HOST_PREFIX}${currentCommit}${env.APP_HOST_SUFFIX}"
  }

  stages {

    stage('dependencies') {
      steps {
        sh "yarn install --frozen-lockfile"
      }
    }

    stage('tests') {
      steps {
        sh "yarn test"
      }
    }

    stage('build app') {
      steps {
        sh "yarn clean"
        sh "yarn build"
      }
    }

    stage('start test container') {
      steps {
        sh "docker build --file release/demo-container/Dockerfile --tag ${imageName}:${currentCommit} ."
        sh "docker tag ${imageName}:${currentCommit} ${dockerRepoUrl}/${imageName}:${currentCommit}"
        sh "docker push ${dockerRepoUrl}/${imageName}:${currentCommit}"
        sh '''
            APP_HOST="${appHost}" \
            IMAGE="${dockerRepoUrl}/${imageName}:${currentCommit}" \
            INSTANCES=1 \
            NAMESPACE="$K8S_NAMESPACE" \
            SERVICE_NAME="${serviceName}" \
            node release/scripts/generate-k8s-yaml.js > release/k8s.yaml
        '''
        withDockerContainer(env.K8S_DEPLOYER) {
            sh "kubectl -n $K8S_NAMESPACE --context $K8S_CONTEXT apply -f release/k8s.yaml"
        }
      }
    }

    stage('BrowserStack') {
      steps {
        sh "echo '...running the browserstack tests...'"
      }
    }

    stage('release') {
      when {
        expression {
          return params.pipeline == 'release' && params.branch == 'master'
        }
      }
      steps {
        sshagent(credentials: ["$CREDENTIAL_ID"]) {
          sh "git checkout ${params.branch}"
          sh "npm config set '//registry.npmjs.org/:_authToken' ${env.NPM_TOKEN}"
          sh "yarn version --loose-semver --new-version patch"
          sh "npm publish"
          sh "git push origin ${params.branch}"
          sh "git push origin --tags"

          slackSend (
            channel: '#gdpr_engineering',
            color: 'good',
            failOnError: true,
            message: ":checkmark: new version of tracking-opt-in has been released to https://www.npmjs.com/package/@wikia/tracking-opt-in"
          )
        }
      }
    }
  }

  post {
    success {
      slackSend (
        channel: '#cake-team-tech',
        color: 'good',
        failOnError: true,
        message: ":checkmark: tracking-opt-in ${params.pipeline} on ${params.branch} <${env.BUILD_URL}|succeeded>"
      )
    }

    failure {
      slackSend (
        channel: '#cake-team-tech',
        color: 'warning',
        failOnError: true,
        message: ":warning: tracking-opt-in ${params.pipeline} on ${params.branch} <${env.BUILD_URL}|failed>"
      )
    }

    always {
        // junit allowEmptyResults: true, testResults: 'reports/karma/junit/*.xml'
        allure([
          config: [
            includeProperties: false,
          jdk: '',
          properties: [],
          reportBuildPolicy: 'ALWAYS',
          results: [
            [path: 'reports/karma/allure']
          ]
          ]
        ])
        publishHTML([
          allowMissing: true,
          alwaysLinkToLastBuild: false,
          keepAll: true,
          reportDir: 'reports/karma/coverage',
          reportFiles: 'index.html',
          reportName: 'Unit Test Code Coverage Report',
          reportTitles: ''
        ])
      withDockerContainer(env.K8S_DEPLOYER) {
        sh "kubectl -n $K8S_NAMESPACE --context $K8S_CONTEXT delete service,deployment,ingress -l app=${serviceName}"
      }
    }
  }
}
